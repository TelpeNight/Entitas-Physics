//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Physics.GravityFactorComponent physicsGravityFactor { get { return (Physics.GravityFactorComponent)GetComponent(GameComponentsLookup.PhysicsGravityFactor); } }
    public bool hasPhysicsGravityFactor { get { return HasComponent(GameComponentsLookup.PhysicsGravityFactor); } }

    public void AddPhysicsGravityFactor(float newValue) {
        var index = GameComponentsLookup.PhysicsGravityFactor;
        var component = (Physics.GravityFactorComponent)CreateComponent(index, typeof(Physics.GravityFactorComponent));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePhysicsGravityFactor(float newValue) {
        var index = GameComponentsLookup.PhysicsGravityFactor;
        var component = (Physics.GravityFactorComponent)CreateComponent(index, typeof(Physics.GravityFactorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePhysicsGravityFactor() {
        RemoveComponent(GameComponentsLookup.PhysicsGravityFactor);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPhysicsGravityFactor;

    public static Entitas.IMatcher<GameEntity> PhysicsGravityFactor {
        get {
            if (_matcherPhysicsGravityFactor == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PhysicsGravityFactor);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPhysicsGravityFactor = matcher;
            }

            return _matcherPhysicsGravityFactor;
        }
    }
}
