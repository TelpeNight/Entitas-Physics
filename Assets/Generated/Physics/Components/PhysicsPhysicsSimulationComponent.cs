//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PhysicsContext {

    public PhysicsEntity physicsSimulationEntity { get { return GetGroup(PhysicsMatcher.PhysicsSimulation).GetSingleEntity(); } }
    public Physics.SimulationComponent physicsSimulation { get { return physicsSimulationEntity.physicsSimulation; } }
    public bool hasPhysicsSimulation { get { return physicsSimulationEntity != null; } }

    public PhysicsEntity SetPhysicsSimulation(Unity.Physics.Simulation newSimulation, Unity.Jobs.JobHandle newFinishHandle) {
        if (hasPhysicsSimulation) {
            throw new Entitas.EntitasException("Could not set PhysicsSimulation!\n" + this + " already has an entity with Physics.SimulationComponent!",
                "You should check if the context already has a physicsSimulationEntity before setting it or use context.ReplacePhysicsSimulation().");
        }
        var entity = CreateEntity();
        entity.AddPhysicsSimulation(newSimulation, newFinishHandle);
        return entity;
    }

    public void ReplacePhysicsSimulation(Unity.Physics.Simulation newSimulation, Unity.Jobs.JobHandle newFinishHandle) {
        var entity = physicsSimulationEntity;
        if (entity == null) {
            entity = SetPhysicsSimulation(newSimulation, newFinishHandle);
        } else {
            entity.ReplacePhysicsSimulation(newSimulation, newFinishHandle);
        }
    }

    public void RemovePhysicsSimulation() {
        physicsSimulationEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PhysicsEntity {

    public Physics.SimulationComponent physicsSimulation { get { return (Physics.SimulationComponent)GetComponent(PhysicsComponentsLookup.PhysicsSimulation); } }
    public bool hasPhysicsSimulation { get { return HasComponent(PhysicsComponentsLookup.PhysicsSimulation); } }

    public void AddPhysicsSimulation(Unity.Physics.Simulation newSimulation, Unity.Jobs.JobHandle newFinishHandle) {
        var index = PhysicsComponentsLookup.PhysicsSimulation;
        var component = (Physics.SimulationComponent)CreateComponent(index, typeof(Physics.SimulationComponent));
        component.Simulation = newSimulation;
        component.FinishHandle = newFinishHandle;
        AddComponent(index, component);
    }

    public void ReplacePhysicsSimulation(Unity.Physics.Simulation newSimulation, Unity.Jobs.JobHandle newFinishHandle) {
        var index = PhysicsComponentsLookup.PhysicsSimulation;
        var component = (Physics.SimulationComponent)CreateComponent(index, typeof(Physics.SimulationComponent));
        component.Simulation = newSimulation;
        component.FinishHandle = newFinishHandle;
        ReplaceComponent(index, component);
    }

    public void RemovePhysicsSimulation() {
        RemoveComponent(PhysicsComponentsLookup.PhysicsSimulation);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PhysicsMatcher {

    static Entitas.IMatcher<PhysicsEntity> _matcherPhysicsSimulation;

    public static Entitas.IMatcher<PhysicsEntity> PhysicsSimulation {
        get {
            if (_matcherPhysicsSimulation == null) {
                var matcher = (Entitas.Matcher<PhysicsEntity>)Entitas.Matcher<PhysicsEntity>.AllOf(PhysicsComponentsLookup.PhysicsSimulation);
                matcher.componentNames = PhysicsComponentsLookup.componentNames;
                _matcherPhysicsSimulation = matcher;
            }

            return _matcherPhysicsSimulation;
        }
    }
}
